A zero-indexed array A consisting of N integers is given. We visit the indexes of the array in the following way.
In the first step we visit the index 0; in every subsequent step we move from the visited index K to the index:
M = K + A(K)
provided M is within the array bounds. Otherwise, K is the last index visited.
Write a function:
class Solution { public int solution(int[] A); }
that given an array A, returns the number of indexes that cannot be visited by the described procedure.

For example, for the array: A = {1, 2, 3}, only index 2 cannot be visited, so the answer is 1.
For the array: A = {3, -5, 0, -1, -3}, indexes 1 and 4 cannot be visited so the answer is 2.

Assume that:
* N is an integer within range [0, 200'000]
* each element of an array A is an integer within the range [-1'000'000, 1'000'000]

Complexity: ???
